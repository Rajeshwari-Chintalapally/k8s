----yaml file preparation ---------------
#This sample yaml used to deploy pods/deployment/service/replicaset
#below are parameters which are mandatory to add to yaml file

1.apiversion: #k8s appropriate version  
  -- for pod and service = v1 
  -- for deployment and replicaset = app/v1
2.kind:       #need to specify which kind like is it 'pod' or 'service' or 'deployment' or 'replicaset'
3.metadata:   #type of dictionary where provide name of pod and lables
4.spec:       #used to mention container name and image

Example:
apiVersion:  v1
kind:  Pod    #case sensitive
metadata: #dictionary
  name:  myapp-pod
  labels:        #dictonary
    name:  myapp
    type:  front-end
spec:
  containers:  #list
    - name:  nginx-container    # '-' indicates first item in list
      image: nginx
    - name: busybox-container
      image: busybox
-----------------Commands------------------------
kubectl get all # will gives all pods,repliaset,deployments etc..

kubectl create -f <yaml filename> #need to create yaml file with pod details
OR 
kubectl apply -f <yaml file name>
OR 
kubectl run <yourimagename> --image=<imagename>
kubectl get pods
kubectl get pods -o wide
kubectl describe pod <podname>
kubectl delete pod <podname>
kubectl get nodes
kubectl run redis --image=redis --dry-run=client -o yaml>redis.yaml      #creates redis.yaml file with configurations
kubectl create -f redis.yaml
kubectl create <deployment> or <replicaset> or <pod> --help

--------------------------------------------------
Replication controller:

apiVersion:  v1
kind:  ReplicationController    #case sensitive
metadata:    ------>replication contorller
  name:  myapp-rc
  labels:       
    name:  myapp
    type:  front-end
spec:          ----> replication contorller
  template: 
    metadata:   ---------->POD
      name:  myapp-pod
      labels:       
        name:  myapp
        type:  front-end
    spec:         ----->POD
      containers:  #list
        - name:  nginx-container   
          image: nginx
  replicas: 3
#this will deploy 3 pods with labels
------------------------------------------------------
Replica Set:

apiVersion: apps/v1
kind: ReplicaSet
metadata:
  name: myapp-replicaset
  labels:
    app: myapp
    type: front-end
spec:
  template:
    metadata:
      name: myapp-pod
      labels:
        app: myapp
        type: front-end
  spec:
    containers:
      - name: nginx-container
        image: nginx
  replicas: 3
  selector: 
    matchLabels:
      type: front-end
--------------------------------------------------------------
kubectl create -f <replicaset or controller yaml file>
#if modify replica set number
kubectl replace -f <replica yaml file name>
OR 
kubectl edit rs new-replica-set #if need any changes, it will open file and once you save file it automatically update the changes in file
OR
#If you use below two commands to increase replicaset , replica set number will increase but yaml file replica count not updates.
#it is good to update in yaml file and run above command to update the replicaset. So both yaml and repliacaset will have same number.
kubectl scale --replicas=6 -f <yaml filename>
OR
kubectl scale --replicas=6 replicaset <replicaset name> # get from metadata: name: <replicaset name>
kubectl get replicaset
kubectl delete replicaset <name>
kubectl explain replicaset



-------------------------------------------------------------------
 



